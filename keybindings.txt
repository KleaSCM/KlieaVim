# Neovim Keybinds Reference

## Normal Mode Keybinds:
- `<Leader>ff` : Find files using Telescope.
  - Action: Opens the file finder for quickly searching and opening files.
  - Command: `:Telescope find_files`

- `<Leader>fg` : Live grep using Telescope.
  - Action: Searches for a string in the current project using live grep.
  - Command: `:Telescope live_grep`

## Insert Mode Keybinds:
- None defined yet.

## Visual Mode Keybinds:
- None defined yet.

## Custom Mappings:
- The leader key is mapped to `\` (backslash).
  - Example: `\ff` will trigger the file search command

## tree view 
  -leader e
    - Action: opens the nvimtree




-- Enable mouse support
vim.o.mouse = 'a' -- Enable mouse for all modes

-- Set the runtime path to include lazy.nvim
local lazypath = vim.fn.stdpath('data') .. '/lazy/lazy.nvim'
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    'git', 'clone', '--filter=blob:none', '--branch=stable',
    'https://github.com/folke/lazy.nvim.git', lazypath
  })
end
vim.opt.rtp:prepend(lazypath)

-- Load lazy.nvim and setup plugins
require('lazy').setup({
  'tpope/vim-sleuth',
  'nvim-treesitter/nvim-treesitter',
  'nvim-lualine/lualine.nvim',
  'neovim/nvim-lspconfig',
  'hrsh7th/nvim-cmp',
  'hrsh7th/cmp-nvim-lsp',
  'L3MON4D3/LuaSnip',
  'saadparwaiz1/cmp_luasnip',
  'nvim-telescope/telescope.nvim',
  'folke/tokyonight.nvim',
  'kyazdani42/nvim-tree.lua',
  'kyazdani42/nvim-web-devicons',
  'lewis6991/gitsigns.nvim',
})

-- Basic settings
vim.o.number = true
vim.o.relativenumber = true
vim.o.expandtab = true
vim.o.shiftwidth = 4
vim.o.tabstop = 4
vim.o.smartindent = true
vim.o.wrap = false
vim.o.scrolloff = 8
vim.o.sidescrolloff = 8
vim.o.termguicolors = true
vim.o.hidden = true

-- Load keybinds from the keybinds.lua file
require('keybinds')

-- Set colorscheme
vim.cmd('colorscheme tokyonight')

-- Set transparency
vim.cmd [[
  highlight Normal guibg=NONE ctermbg=NONE
  highlight NonText guibg=NONE ctermbg=NONE
]]

-- Use 'feh' to set background images
vim.cmd [[
  autocmd VimEnter * silent !feh --bg-scale /home/kliea/.config/nvim/assets/editor.jpeg
  autocmd TermOpen * silent !feh --bg-scale /home/kliea/.config/nvim/assets/terminal.jpeg
  autocmd BufEnter NvimTree * silent !feh --bg-scale /home/kliea/.config/nvim/assets/tree.jpeg
]]

-- Load plugin configurations for nvim-tree
require('nvim-tree').setup({
  disable_netrw = true,
  hijack_netrw = true,
  update_focused_file = {
    enable = true,
    update_cwd = true,
  },
  view = {
    width = 30,
    side = 'left',
    adaptive_size = false,
    number = true,
    relativenumber = true,
  },
})

-- Load and configure gitsigns with new highlight API
require('gitsigns').setup {
  signs = {
    add          = { text = '│' },
    change       = { text = '│' },
    delete       = { text = '_' },
    topdelete    = { text = '‾' },
    changedelete = { text = '~' },
  },
  watch_gitdir = {
    interval = 1000,
    follow_files = true,
  },
  current_line_blame = true,
}

-- Set highlights using vim.api.nvim_set_hl
vim.api.nvim_set_hl(0, 'GitSignsAdd', { link = 'GitGutterAdd' })
vim.api.nvim_set_hl(0, 'GitSignsAddLn', { link = 'GitSignsAddLn' })
vim.api.nvim_set_hl(0, 'GitSignsAddNr', { link = 'GitSignsAddNr' })
vim.api.nvim_set_hl(0, 'GitSignsChange', { link = 'GitGutterChange' })
vim.api.nvim_set_hl(0, 'GitSignsChangeLn', { link = 'GitSignsChangeLn' })
vim.api.nvim_set_hl(0, 'GitSignsChangeNr', { link = 'GitSignsChangeNr' })
vim.api.nvim_set_hl(0, 'GitSignsChangedelete', { link = 'GitGutterChange' })
vim.api.nvim_set_hl(0, 'GitSignsChangedeleteLn', { link = 'GitSignsChangeLn' })
vim.api.nvim_set_hl(0, 'GitSignsChangedeleteNr', { link = 'GitSignsChangeNr' })
vim.api.nvim_set_hl(0, 'GitSignsDelete', { link = 'GitGutterDelete' })
vim.api.nvim_set_hl(0, 'GitSignsDeleteLn', { link = 'GitSignsDeleteLn' })
vim.api.nvim_set_hl(0, 'GitSignsDeleteNr', { link = 'GitSignsDeleteNr' })
vim.api.nvim_set_hl(0, 'GitSignsTopdelete', { link = 'GitGutterDelete' })
vim.api.nvim_set_hl(0, 'GitSignsTopdeleteLn', { link = 'GitSignsDeleteLn' })
vim.api.nvim_set_hl(0, 'GitSignsTopdeleteNr', { link = 'GitSignsDeleteNr' })

-- Load Treesitter configurations
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "lua", "javascript", "typescript", "python", "html", "css", "bash" },
  highlight = {
    enable = true,
  },
  indent = {
    enable = true,
  },
}

-- Setup LSP for TypeScript (use ts_ls instead of tsserver)
require('lspconfig').ts_ls.setup {}



sudo apt install feh












Once upon a time, in the heart of the Neovim configuration forest, Klea sought to unlock the mystical powers of transparency and stunning background images for her coding environment. She had already crafted a solid foundation in her init.lua, a magical scroll that controlled the very essence of her Neovim setup. However, she wanted more—she desired beauty and elegance in her editor, with ethereal transparency and pictures that would give her coding experience a new life.

Klea began her journey by adding a touch of transparency to her editor’s interface. She whispered the following spell into her init.lua:

lua

-- Enable mouse support
vim.o.mouse = 'a' -- Mouse is now an ally for all modes

-- Set transparency (adjust alpha for desired level)
vim.cmd [[
  highlight Normal guibg=NONE ctermbg=NONE
  highlight NonText guibg=NONE ctermbg=NONE
  highlight LineNr guibg=NONE ctermbg=NONE
]]

This spell transformed the background of her Neovim editor into a transparent canvas, allowing her to peer beyond the confines of code, giving her workspace an airy, open feel.

But that was not the end of Klea’s quest. To truly enchant her environment, she needed to summon the power of background images—each one perfectly tailored to different sections of her Neovim kingdom. She needed the editor, the terminal, and the file tree to reflect her creative essence with stunning backgrounds. The answer lay deep in the heart of her configuration, and she added this incantation:

lua

-- Add background images using feh
vim.cmd [[
  autocmd VimEnter * silent !feh --bg-scale /home/kliea/.config/nvim/assets/editor.jpeg
  autocmd TermOpen * silent !feh --bg-scale /home/kliea/.config/nvim/assets/terminal.jpeg
  autocmd BufEnter NvimTree_* silent !feh --bg-scale /home/kliea/.config/nvim/assets/tree.jpeg
]]

These commands called upon the magical program feh, which had the power to set beautiful images as backgrounds for her editor, terminal, and file tree. Klea ensured that each section of her workspace was draped with the imagery she carefully selected from her personal gallery located at /home/kliea/.config/nvim/assets/.

And so, her Neovim setup became a realm of serene transparency and breathtaking visuals, making her coding adventure an immersive experience.

As Klea continued to refine her init.lua, she knew she had achieved something powerful—something that made her workspace not just functional, but beautiful. With these additions, her Neovim setup was no longer just a tool; it was an extension of her creativity, a reflection of her passion for code, and a canvas for her imagination.